#pragma once

enum en_PACKET_TYPE
{
	//------------------------------------------------------
	// Game Server
	//------------------------------------------------------
	en_PACKET_CS_GAME_SERVER = 1000,

	//------------------------------------------------------------
	// 로그인 요청
	//
	//	{
	//		WORD	Type
	//
	//		INT64	AccountNo
	//		char	SessionKey[64]
	//
	//		
	//	}
	//
	//------------------------------------------------------------
	en_PACKET_CS_GAME_REQ_LOGIN,

	//------------------------------------------------------------
	// 로그인 응답
	//
	//	{
	//		WORD	Type
	//
	//		BYTE	Status (0: 실패 / 1: 성공)
	//		INT64	AccountNo
	//	}
	//
	//	지금 더미는 무조건 성공으로 판단하고 있음
	//	Status 결과를 무시한다는 이야기
	//
	//  en_PACKET_CS_GAME_RES_LOGIN define 값 사용.
	//------------------------------------------------------------
	en_PACKET_CS_GAME_RES_LOGIN,



	//------------------------------------------------------------
	// 테스트용 에코 요청
	//
	//	{
	//		WORD		Type
	//
	//		INT64		AccountoNo
	//		LONGLONG	SendTick
	//	}
	//
	//------------------------------------------------------------	
	en_PACKET_CS_GAME_REQ_ECHO = 5000,

	//------------------------------------------------------------
	// 테스트용 에코 응답 (REQ 를 그대로 돌려줌)
	//
	//	{
	//		WORD		Type
	//
	//		INT64		AccountoNo
	//		LONGLONG	SendTick
	//	}
	//
	//------------------------------------------------------------
	en_PACKET_CS_GAME_RES_ECHO,

	//------------------------------------------------------------
	// 하트비트
	//
	//	{
	//		WORD		Type
	//	}
	//
	//
	// 클라이언트는 이를 30초마다 보내줌.
	// 서버는 40초 이상동안 메시지 수신이 없는 클라이언트를 강제로 끊어줘야 함.
	//------------------------------------------------------------	
	en_PACKET_CS_GAME_REQ_HEARTBEAT,
};


enum protocolType
{
    // P2P 네트워킹 프로토콜 타입 범위 (1000 ~ 1020)
    P2P_NETWORKING_HOSTCHECK_REQ = 1000,
	//------------------------------------------------------------
	//  호스트 체크(현재파티의 호스트가 누구인지)
	// 
	//	{
	//		WORD		Type
	//	}
	//
	//------------------------------------------------------------

    P2P_NETWORKING_HOSTCHECK_RES = 1001,
	//------------------------------------------------------------
	//  호스트 체크(현재파티의 호스트가 누구인지)
	// 
	//	{
	//		WORD		Type
	//		WCHAR       ip[16]
	//		USHORT      port
	//		ULONGLONG   sessionID
	//	}
	//
	//------------------------------------------------------------


    P2P_NETWORKING_HOSTAVALIABLE_REQ = 1002,
	//------------------------------------------------------------
	//  p2p 내가 끊어졌는지 or 호스트가 끊어졌는지
	// 
	//	{
	//		WORD		Type
	//		ULONGLONG   sessionID
	//	}
	//
	//------------------------------------------------------------

    P2P_NETWORKING_HOSTAVALIABLE_RES = 1003,
	//------------------------------------------------------------
	//  p2p 내가 끊어졌는지 or 호스트가 끊어졌는지
	// 
	//	{
	//		WORD		Type
	//		BYTE		status
	//	}
	//
	//------------------------------------------------------------
 
    P2P_NETWORKING_HOSTCHANGE_REQ = 1004,
	//------------------------------------------------------------
	//  p2p 호스트 바꾸라는 요청
	// 
	//	{
	//		WORD		Type
	//		WCHAR		ip[16];
	//		USHORT		port;
	//	}
	//
	//------------------------------------------------------------

    P2P_NETWORKING_HOSTCHANGE_RES = 1005,
 
    P2P_NETWORKING_PARTYINFO_REQ = 1006,
    P2P_NETWORKING_PARTYINFO_RES = 1007,
 
    P2P_NETWORKING_NETWORKINGINFO_REQ = 1008,
    P2P_NETWORKING_NETWORKINGINFO_RES = 1009,
 
    P2P_NETWORKING_TEST = 1010,
};